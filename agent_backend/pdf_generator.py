import markdown
import io
import weasyprint
import tempfile
import os
import logging

logger = logging.getLogger(__name__)

def markdown_to_html(markdown_text: str, title: str = "Study Plan") -> str:
    """
    Convert markdown text to HTML with styling.
    """
    try:
        # Convert markdown to HTML
        html_body = markdown.markdown(
            markdown_text,
            extensions=['extra', 'codehilite', 'tables', 'toc']
        )
        
        # Create a complete HTML document with CSS styling
        html = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <title>{title}</title>
            <style>
                @page {{
                    size: A4;
                    margin: 2cm;
                }}
                body {{
                    font-family: 'Arial', sans-serif;
                    line-height: 1.6;
                    color: #333;
                    max-width: 100%;
                }}
                h1 {{
                    color: #2563eb;
                    font-size: 28px;
                    margin-top: 40px;
                    margin-bottom: 20px;
                    page-break-before: always;
                    border-bottom: 1px solid #e5e7eb;
                    padding-bottom: 10px;
                }}
                h1:first-of-type {{
                    page-break-before: avoid;
                }}
                h2 {{
                    color: #3b82f6;
                    font-size: 22px;
                    margin-top: 30px;
                    margin-bottom: 15px;
                }}
                h3 {{
                    color: #60a5fa;
                    font-size: 18px;
                    margin-top: 25px;
                    margin-bottom: 10px;
                }}
                h4 {{
                    color: #93c5fd;
                    font-size: 16px;
                    margin-top: 20px;
                    margin-bottom: 10px;
                }}
                p {{
                    margin-bottom: 16px;
                }}
                ul, ol {{
                    margin-bottom: 20px;
                    padding-left: 20px;
                }}
                li {{
                    margin-bottom: 8px;
                }}
                code {{
                    background-color: #f1f5f9;
                    padding: 2px 4px;
                    border-radius: 4px;
                    font-family: 'Courier New', monospace;
                    font-size: 90%;
                }}
                pre {{
                    background-color: #f1f5f9;
                    padding: 15px;
                    border-radius: 8px;
                    overflow-x: auto;
                    margin-bottom: 20px;
                }}
                blockquote {{
                    border-left: 4px solid #e5e7eb;
                    padding-left: 16px;
                    margin-left: 0;
                    margin-right: 0;
                    font-style: italic;
                    color: #6b7280;
                }}
                table {{
                    border-collapse: collapse;
                    width: 100%;
                    margin-bottom: 20px;
                }}
                th, td {{
                    border: 1px solid #e5e7eb;
                    padding: 12px;
                    text-align: left;
                }}
                th {{
                    background-color: #f1f5f9;
                    font-weight: bold;
                }}
                img {{
                    max-width: 100%;
                    height: auto;
                }}
                .page-break {{
                    page-break-after: always;
                }}
                .header {{
                    text-align: center;
                    margin-bottom: 40px;
                }}
                .footer {{
                    text-align: center;
                    font-size: 12px;
                    color: #6b7280;
                    margin-top: 40px;
                    border-top: 1px solid #e5e7eb;
                    padding-top: 20px;
                }}
                strong {{
                    color: #4b5563;
                    font-weight: bold;
                }}
                a {{
                    color: #2563eb;
                    text-decoration: none;
                }}
                a:hover {{
                    text-decoration: underline;
                }}
            </style>
        </head>
        <body>
            <div class="header">
                <h1>CramPlan</h1>
                <p>Follow your plan to success and good luck!</p>
            </div>
            
            {html_body}
            
            <div class="footer">
                <p>Generated by CramPlan - Your personalized study assistant</p>
            </div>
        </body>
        </html>
        """
        
        return html
    except Exception as e:
        logger.error(f"Error converting markdown to HTML: {str(e)}")
        raise

def html_to_pdf(html_content: str) -> bytes:
    """
    Convert HTML to PDF using WeasyPrint.
    """
    try:
        # Create a temporary HTML file
        with tempfile.NamedTemporaryFile(suffix='.html', delete=False) as temp_html:
            temp_html.write(html_content.encode('utf-8'))
            temp_html_path = temp_html.name
        
        try:
            # Convert HTML to PDF
            try:
                pdf = weasyprint.HTML(filename=temp_html_path).write_pdf()
                return pdf
            except Exception as weasy_error:
                logger.error(f"WeasyPrint error: {str(weasy_error)}")
                logger.info("If you're on macOS, try running the setup_weasyprint.sh script to set environment variables")
                logger.info("Command: source agent_backend/setup_weasyprint.sh")
                raise Exception(f"WeasyPrint error: {str(weasy_error)}. If on macOS, run 'source agent_backend/setup_weasyprint.sh'")
        finally:
            # Clean up the temporary file
            if os.path.exists(temp_html_path):
                os.remove(temp_html_path)
    except Exception as e:
        logger.error(f"Error converting HTML to PDF: {str(e)}")
        raise

def generate_content_markdown(content_response, title="Study Plan") -> str:
    """
    Generate markdown content from the ContentResponse object.
    
    Args:
        content_response: ContentResponse object with topic, main_description, and subtopics
        title: Title for the document
        
    Returns:
        Markdown formatted string
    """
    try:
        markdown_content = f"# {title}\n\n"
        
        # Add each main topic
        for main_topic in content_response.topic:
            markdown_content += f"## {main_topic.topic_title}\n\n"
            markdown_content += f"{main_topic.main_description}\n\n"
            
            # Add subtopics
            for subtopic in main_topic.subtopics:
                markdown_content += f"### {subtopic.sub_topic_title}\n\n"
                markdown_content += f"{subtopic.sub_content_text}\n\n"
            
            # Add a page break after each main topic
            markdown_content += "<div class='page-break'></div>\n\n"
        
        return markdown_content
    except Exception as e:
        logger.error(f"Error generating markdown content: {str(e)}")
        raise 